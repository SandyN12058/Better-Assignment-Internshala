name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Automated tests for pull requests
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up environment and install dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies (Backend)
        run: |
          cd backend
          npm install

      - name: Run Backend Tests
        run: |
          cd backend
          npm test  # Assuming you are using Jest or Mocha for backend tests

      - name: Install dependencies (Frontend)
        run: |
          cd frontend
          npm install

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm test  # Assuming you are using Jest for frontend tests

  # Build and Push Docker images
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:backend-latest
            ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:backend-v${{ github.run_number }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:frontend-latest
            ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:frontend-v${{ github.run_number }}

  # Deployment to AWS EC2
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host key to known hosts
        run: echo "${{ secrets.EC2_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

      - name: Deploy to AWS EC2
        run: |
          echo "Deploying to AWS EC2"
          ssh -T ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'

            # Starting directory
            cd /home/ubuntu
            sudo su

            # Check if the application directory exists, clone if it doesn't
            if [ ! -d "/home/ubuntu/Better-Assignment-Internshala" ]; then
                git clone https://github.com/SandyN12058/Better-Assignment-Internshala.git
            fi

            # Navigate to the application directory
            cd /home/ubuntu/Better-Assignment-Internshala

            # Fetch the latest code from the repository
            git pull origin main

            # Login to Dockerhub account (useful if we need to pull Docker images)
            echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin

            # Pull the latest Docker images (this is optional if you're using pre-built images)
            docker pull ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:backend-latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:frontend-latest

            # Deploy to Kubernetes
            # kubectl apply -f k8s/deployment.yml  # Apply the deployment
            # kubectl apply -f k8s/service.yml     # Apply the service

            # Verify pods are running
            kubectl get pods

          EOF

      # Notify Slack on Deployment Success
      # - name: Notify Slack on Deployment Success
        # if: success()
        # run: |
          # curl -X POST -H 'Content-type: application/json' \
          # --data '{"text":"Deployment to EC2 was successful!"}' \
          # ${{ secrets.SLACK_WEBHOOK_URL }}

      # Notify Slack on Deployment Failure
      # - name: Notify Slack on Deployment Failure
        # if: failure()
        # run: |
          # curl -X POST -H 'Content-type: application/json' \
          # --data '{"text":"Deployment to EC2 failed. Please check the logs!"}' \
          # ${{ secrets.SLACK_WEBHOOK_URL }}
