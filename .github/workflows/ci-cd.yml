name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:backend-latest
            ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:backend-v${{ github.run_number }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:frontend-latest
            ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:frontend-v${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10  # Adjust this as needed

    # Only run this job on pushes to the main branch
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host key to known hosts
        run: echo "${{ secrets.EC2_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

      - name: Setup SSH Config
        run: |
          mkdir -p ~/.ssh
          echo "ServerAliveInterval 60" >> ~/.ssh/config
          echo "ServerAliveCountMax 5" >> ~/.ssh/config

      - name: Deploy to AWS EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i "better-assignment-internshala.pem" ubuntu@ec2-13-60-186-59.eu-north-1.compute.amazonaws.com

      - name: Deploy to AWS EC2
        run: |
          echo "Deploying to AWS EC2"
          ssh ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'

            # Starting directory
            cd /home/ubuntu

            # Check if the application directory exists, clone if it doesn't
            if [ ! -d "/home/ubuntu/Better-Assignment-Internshala" ]; then
                git clone https://github.com/SandyN12058/Better-Assignment-Internshala.git
            fi

            # Navigate to the application directory
            cd /home/ubuntu/Better-Assignment-Internshala

            # Fetch the latest code from the repository
            git pull origin main

            # Login to Dockerhub account (useful if we need to pull Docker images)
            echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin

            # Pull the latest Docker images (this is optional if you're using pre-built images)
            docker pull ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:backend-latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/better-assignment-internshala:frontend-latest

            # Deploy to Kubernetes
            kubectl apply -f k8s/deployment.yml  # Apply the deployment
            kubectl apply -f k8s/service.yml     # Apply the service

            # Verify pods are running
            kubectl get pods

          EOF

